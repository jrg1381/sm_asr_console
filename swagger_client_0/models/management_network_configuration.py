# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.management_proxy_configuration import ManagementProxyConfiguration  # noqa: F401,E501


class ManagementNetworkConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_configuration': 'ManagementProxyConfiguration',
        'relay_configuration': 'ManagementProxyConfiguration'
    }

    attribute_map = {
        'http_configuration': 'http_configuration',
        'relay_configuration': 'relay_configuration'
    }

    def __init__(self, http_configuration=None, relay_configuration=None):  # noqa: E501
        """ManagementNetworkConfiguration - a model defined in Swagger"""  # noqa: E501

        self._http_configuration = None
        self._relay_configuration = None
        self.discriminator = None

        if http_configuration is not None:
            self.http_configuration = http_configuration
        if relay_configuration is not None:
            self.relay_configuration = relay_configuration

    @property
    def http_configuration(self):
        """Gets the http_configuration of this ManagementNetworkConfiguration.  # noqa: E501


        :return: The http_configuration of this ManagementNetworkConfiguration.  # noqa: E501
        :rtype: ManagementProxyConfiguration
        """
        return self._http_configuration

    @http_configuration.setter
    def http_configuration(self, http_configuration):
        """Sets the http_configuration of this ManagementNetworkConfiguration.


        :param http_configuration: The http_configuration of this ManagementNetworkConfiguration.  # noqa: E501
        :type: ManagementProxyConfiguration
        """

        self._http_configuration = http_configuration

    @property
    def relay_configuration(self):
        """Gets the relay_configuration of this ManagementNetworkConfiguration.  # noqa: E501


        :return: The relay_configuration of this ManagementNetworkConfiguration.  # noqa: E501
        :rtype: ManagementProxyConfiguration
        """
        return self._relay_configuration

    @relay_configuration.setter
    def relay_configuration(self, relay_configuration):
        """Sets the relay_configuration of this ManagementNetworkConfiguration.


        :param relay_configuration: The relay_configuration of this ManagementNetworkConfiguration.  # noqa: E501
        :type: ManagementProxyConfiguration
        """

        self._relay_configuration = relay_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementNetworkConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
