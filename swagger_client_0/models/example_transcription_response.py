# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.transcription_response_speaker import TranscriptionResponseSpeaker  # noqa: F401,E501
from swagger_client.models.transcription_response_word import TranscriptionResponseWord  # noqa: F401,E501


class ExampleTranscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'speakers': 'list[TranscriptionResponseSpeaker]',
        'words': 'list[TranscriptionResponseWord]'
    }

    attribute_map = {
        'speakers': 'speakers',
        'words': 'words'
    }

    def __init__(self, speakers=None, words=None):  # noqa: E501
        """ExampleTranscriptionResponse - a model defined in Swagger"""  # noqa: E501

        self._speakers = None
        self._words = None
        self.discriminator = None

        if speakers is not None:
            self.speakers = speakers
        if words is not None:
            self.words = words

    @property
    def speakers(self):
        """Gets the speakers of this ExampleTranscriptionResponse.  # noqa: E501


        :return: The speakers of this ExampleTranscriptionResponse.  # noqa: E501
        :rtype: list[TranscriptionResponseSpeaker]
        """
        return self._speakers

    @speakers.setter
    def speakers(self, speakers):
        """Sets the speakers of this ExampleTranscriptionResponse.


        :param speakers: The speakers of this ExampleTranscriptionResponse.  # noqa: E501
        :type: list[TranscriptionResponseSpeaker]
        """

        self._speakers = speakers

    @property
    def words(self):
        """Gets the words of this ExampleTranscriptionResponse.  # noqa: E501


        :return: The words of this ExampleTranscriptionResponse.  # noqa: E501
        :rtype: list[TranscriptionResponseWord]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this ExampleTranscriptionResponse.


        :param words: The words of this ExampleTranscriptionResponse.  # noqa: E501
        :type: list[TranscriptionResponseWord]
        """

        self._words = words

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExampleTranscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
