# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TranscriptionResultSpeaker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'str',
        'name': 'str',
        'time': 'str'
    }

    attribute_map = {
        'duration': 'duration',
        'name': 'name',
        'time': 'time'
    }

    def __init__(self, duration=None, name=None, time=None):  # noqa: E501
        """TranscriptionResultSpeaker - a model defined in Swagger"""  # noqa: E501

        self._duration = None
        self._name = None
        self._time = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if name is not None:
            self.name = name
        if time is not None:
            self.time = time

    @property
    def duration(self):
        """Gets the duration of this TranscriptionResultSpeaker.  # noqa: E501


        :return: The duration of this TranscriptionResultSpeaker.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TranscriptionResultSpeaker.


        :param duration: The duration of this TranscriptionResultSpeaker.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def name(self):
        """Gets the name of this TranscriptionResultSpeaker.  # noqa: E501


        :return: The name of this TranscriptionResultSpeaker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TranscriptionResultSpeaker.


        :param name: The name of this TranscriptionResultSpeaker.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time(self):
        """Gets the time of this TranscriptionResultSpeaker.  # noqa: E501


        :return: The time of this TranscriptionResultSpeaker.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TranscriptionResultSpeaker.


        :param time: The time of this TranscriptionResultSpeaker.  # noqa: E501
        :type: str
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscriptionResultSpeaker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
