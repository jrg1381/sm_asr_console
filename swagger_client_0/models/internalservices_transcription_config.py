# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.internalservices_additional_vocab import InternalservicesAdditionalVocab  # noqa: F401,E501
from swagger_client.models.internalservices_diarization import InternalservicesDiarization  # noqa: F401,E501


class InternalservicesTranscriptionConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_diarization_labels': 'list[str]',
        'duration_seconds': 'str',
        'language_code': 'str',
        'additional_vocab': 'list[InternalservicesAdditionalVocab]',
        'media_file': 'str',
        'media_file_uri': 'str',
        'diarization': 'InternalservicesDiarization'
    }

    attribute_map = {
        'channel_diarization_labels': 'channel_diarization_labels',
        'duration_seconds': 'duration_seconds',
        'language_code': 'language_code',
        'additional_vocab': 'additional_vocab',
        'media_file': 'media_file',
        'media_file_uri': 'media_file_uri',
        'diarization': 'diarization'
    }

    def __init__(self, channel_diarization_labels=None, duration_seconds=None, language_code=None, additional_vocab=None, media_file=None, media_file_uri=None, diarization=None):  # noqa: E501
        """InternalservicesTranscriptionConfig - a model defined in Swagger"""  # noqa: E501

        self._channel_diarization_labels = None
        self._duration_seconds = None
        self._language_code = None
        self._additional_vocab = None
        self._media_file = None
        self._media_file_uri = None
        self._diarization = None
        self.discriminator = None

        if channel_diarization_labels is not None:
            self.channel_diarization_labels = channel_diarization_labels
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if language_code is not None:
            self.language_code = language_code
        if additional_vocab is not None:
            self.additional_vocab = additional_vocab
        if media_file is not None:
            self.media_file = media_file
        if media_file_uri is not None:
            self.media_file_uri = media_file_uri
        if diarization is not None:
            self.diarization = diarization

    @property
    def channel_diarization_labels(self):
        """Gets the channel_diarization_labels of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The channel_diarization_labels of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._channel_diarization_labels

    @channel_diarization_labels.setter
    def channel_diarization_labels(self, channel_diarization_labels):
        """Sets the channel_diarization_labels of this InternalservicesTranscriptionConfig.


        :param channel_diarization_labels: The channel_diarization_labels of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: list[str]
        """

        self._channel_diarization_labels = channel_diarization_labels

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The duration_seconds of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: str
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this InternalservicesTranscriptionConfig.


        :param duration_seconds: The duration_seconds of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: str
        """

        self._duration_seconds = duration_seconds

    @property
    def language_code(self):
        """Gets the language_code of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The language_code of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this InternalservicesTranscriptionConfig.


        :param language_code: The language_code of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def additional_vocab(self):
        """Gets the additional_vocab of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The additional_vocab of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: list[InternalservicesAdditionalVocab]
        """
        return self._additional_vocab

    @additional_vocab.setter
    def additional_vocab(self, additional_vocab):
        """Sets the additional_vocab of this InternalservicesTranscriptionConfig.


        :param additional_vocab: The additional_vocab of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: list[InternalservicesAdditionalVocab]
        """

        self._additional_vocab = additional_vocab

    @property
    def media_file(self):
        """Gets the media_file of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The media_file of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: str
        """
        return self._media_file

    @media_file.setter
    def media_file(self, media_file):
        """Sets the media_file of this InternalservicesTranscriptionConfig.


        :param media_file: The media_file of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: str
        """
        if media_file is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', media_file):  # noqa: E501
            raise ValueError("Invalid value for `media_file`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._media_file = media_file

    @property
    def media_file_uri(self):
        """Gets the media_file_uri of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The media_file_uri of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: str
        """
        return self._media_file_uri

    @media_file_uri.setter
    def media_file_uri(self, media_file_uri):
        """Sets the media_file_uri of this InternalservicesTranscriptionConfig.


        :param media_file_uri: The media_file_uri of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: str
        """

        self._media_file_uri = media_file_uri

    @property
    def diarization(self):
        """Gets the diarization of this InternalservicesTranscriptionConfig.  # noqa: E501


        :return: The diarization of this InternalservicesTranscriptionConfig.  # noqa: E501
        :rtype: InternalservicesDiarization
        """
        return self._diarization

    @diarization.setter
    def diarization(self, diarization):
        """Sets the diarization of this InternalservicesTranscriptionConfig.


        :param diarization: The diarization of this InternalservicesTranscriptionConfig.  # noqa: E501
        :type: InternalservicesDiarization
        """

        self._diarization = diarization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalservicesTranscriptionConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
