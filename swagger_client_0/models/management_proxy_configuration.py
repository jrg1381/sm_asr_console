# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ManagementProxyConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'password': 'str',
        'port': 'int',
        'user': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'password': 'password',
        'port': 'port',
        'user': 'user'
    }

    def __init__(self, ip=None, password=None, port=None, user=None):  # noqa: E501
        """ManagementProxyConfiguration - a model defined in Swagger"""  # noqa: E501

        self._ip = None
        self._password = None
        self._port = None
        self._user = None
        self.discriminator = None

        if ip is not None:
            self.ip = ip
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if user is not None:
            self.user = user

    @property
    def ip(self):
        """Gets the ip of this ManagementProxyConfiguration.  # noqa: E501


        :return: The ip of this ManagementProxyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ManagementProxyConfiguration.


        :param ip: The ip of this ManagementProxyConfiguration.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def password(self):
        """Gets the password of this ManagementProxyConfiguration.  # noqa: E501


        :return: The password of this ManagementProxyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ManagementProxyConfiguration.


        :param password: The password of this ManagementProxyConfiguration.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this ManagementProxyConfiguration.  # noqa: E501


        :return: The port of this ManagementProxyConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ManagementProxyConfiguration.


        :param port: The port of this ManagementProxyConfiguration.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def user(self):
        """Gets the user of this ManagementProxyConfiguration.  # noqa: E501


        :return: The user of this ManagementProxyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ManagementProxyConfiguration.


        :param user: The user of this ManagementProxyConfiguration.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementProxyConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
