# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ManagementIpAddressInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nameservers': 'list[str]',
        'netmask': 'str',
        'gateway': 'str',
        'address': 'str'
    }

    attribute_map = {
        'nameservers': 'nameservers',
        'netmask': 'netmask',
        'gateway': 'gateway',
        'address': 'address'
    }

    def __init__(self, nameservers=None, netmask=None, gateway=None, address=None):  # noqa: E501
        """ManagementIpAddressInfo - a model defined in Swagger"""  # noqa: E501

        self._nameservers = None
        self._netmask = None
        self._gateway = None
        self._address = None
        self.discriminator = None

        if nameservers is not None:
            self.nameservers = nameservers
        if netmask is not None:
            self.netmask = netmask
        if gateway is not None:
            self.gateway = gateway
        if address is not None:
            self.address = address

    @property
    def nameservers(self):
        """Gets the nameservers of this ManagementIpAddressInfo.  # noqa: E501


        :return: The nameservers of this ManagementIpAddressInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers):
        """Sets the nameservers of this ManagementIpAddressInfo.


        :param nameservers: The nameservers of this ManagementIpAddressInfo.  # noqa: E501
        :type: list[str]
        """

        self._nameservers = nameservers

    @property
    def netmask(self):
        """Gets the netmask of this ManagementIpAddressInfo.  # noqa: E501


        :return: The netmask of this ManagementIpAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this ManagementIpAddressInfo.


        :param netmask: The netmask of this ManagementIpAddressInfo.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def gateway(self):
        """Gets the gateway of this ManagementIpAddressInfo.  # noqa: E501


        :return: The gateway of this ManagementIpAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ManagementIpAddressInfo.


        :param gateway: The gateway of this ManagementIpAddressInfo.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def address(self):
        """Gets the address of this ManagementIpAddressInfo.  # noqa: E501


        :return: The address of this ManagementIpAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ManagementIpAddressInfo.


        :param address: The address of this ManagementIpAddressInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementIpAddressInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
