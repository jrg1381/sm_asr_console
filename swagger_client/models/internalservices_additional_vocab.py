# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.internalservices_vocab_with_sounds_like import InternalservicesVocabWithSoundsLike  # noqa: F401,E501


class InternalservicesAdditionalVocab(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vocab': 'str',
        'with_sounds_like': 'InternalservicesVocabWithSoundsLike'
    }

    attribute_map = {
        'vocab': 'vocab',
        'with_sounds_like': 'with_sounds_like'
    }

    def __init__(self, vocab=None, with_sounds_like=None):  # noqa: E501
        """InternalservicesAdditionalVocab - a model defined in Swagger"""  # noqa: E501

        self._vocab = None
        self._with_sounds_like = None
        self.discriminator = None

        if vocab is not None:
            self.vocab = vocab
        if with_sounds_like is not None:
            self.with_sounds_like = with_sounds_like

    @property
    def vocab(self):
        """Gets the vocab of this InternalservicesAdditionalVocab.  # noqa: E501


        :return: The vocab of this InternalservicesAdditionalVocab.  # noqa: E501
        :rtype: str
        """
        return self._vocab

    @vocab.setter
    def vocab(self, vocab):
        """Sets the vocab of this InternalservicesAdditionalVocab.


        :param vocab: The vocab of this InternalservicesAdditionalVocab.  # noqa: E501
        :type: str
        """

        self._vocab = vocab

    @property
    def with_sounds_like(self):
        """Gets the with_sounds_like of this InternalservicesAdditionalVocab.  # noqa: E501


        :return: The with_sounds_like of this InternalservicesAdditionalVocab.  # noqa: E501
        :rtype: InternalservicesVocabWithSoundsLike
        """
        return self._with_sounds_like

    @with_sounds_like.setter
    def with_sounds_like(self, with_sounds_like):
        """Sets the with_sounds_like of this InternalservicesAdditionalVocab.


        :param with_sounds_like: The with_sounds_like of this InternalservicesAdditionalVocab.  # noqa: E501
        :type: InternalservicesVocabWithSoundsLike
        """

        self._with_sounds_like = with_sounds_like

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalservicesAdditionalVocab):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
