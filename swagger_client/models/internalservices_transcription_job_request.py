# coding: utf-8

"""
    Speechmatics Management API

    Speechmatics offer a secure Management REST API that enables you to programatically control the lifecycle of the appliance, including stopping and rebooting the appliance, restarting services, licensing the appliance and controlling the available resources.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.internalservices_job_callback_config import InternalservicesJobCallbackConfig  # noqa: F401,E501
from swagger_client.models.internalservices_transcription_config import InternalservicesTranscriptionConfig  # noqa: F401,E501


class InternalservicesTranscriptionJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback_config': 'InternalservicesJobCallbackConfig',
        'config': 'InternalservicesTranscriptionConfig',
        'job_name': 'str',
        'metadata': 'str'
    }

    attribute_map = {
        'callback_config': 'callback_config',
        'config': 'config',
        'job_name': 'job_name',
        'metadata': 'metadata'
    }

    def __init__(self, callback_config=None, config=None, job_name=None, metadata=None):  # noqa: E501
        """InternalservicesTranscriptionJobRequest - a model defined in Swagger"""  # noqa: E501

        self._callback_config = None
        self._config = None
        self._job_name = None
        self._metadata = None
        self.discriminator = None

        if callback_config is not None:
            self.callback_config = callback_config
        if config is not None:
            self.config = config
        if job_name is not None:
            self.job_name = job_name
        if metadata is not None:
            self.metadata = metadata

    @property
    def callback_config(self):
        """Gets the callback_config of this InternalservicesTranscriptionJobRequest.  # noqa: E501


        :return: The callback_config of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :rtype: InternalservicesJobCallbackConfig
        """
        return self._callback_config

    @callback_config.setter
    def callback_config(self, callback_config):
        """Sets the callback_config of this InternalservicesTranscriptionJobRequest.


        :param callback_config: The callback_config of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :type: InternalservicesJobCallbackConfig
        """

        self._callback_config = callback_config

    @property
    def config(self):
        """Gets the config of this InternalservicesTranscriptionJobRequest.  # noqa: E501


        :return: The config of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :rtype: InternalservicesTranscriptionConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this InternalservicesTranscriptionJobRequest.


        :param config: The config of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :type: InternalservicesTranscriptionConfig
        """

        self._config = config

    @property
    def job_name(self):
        """Gets the job_name of this InternalservicesTranscriptionJobRequest.  # noqa: E501


        :return: The job_name of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this InternalservicesTranscriptionJobRequest.


        :param job_name: The job_name of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def metadata(self):
        """Gets the metadata of this InternalservicesTranscriptionJobRequest.  # noqa: E501


        :return: The metadata of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InternalservicesTranscriptionJobRequest.


        :param metadata: The metadata of this InternalservicesTranscriptionJobRequest.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalservicesTranscriptionJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
